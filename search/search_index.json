{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Repositorio de Marina Practicas IAW de la unidad 2","title":"Repositorio de Marina"},{"location":"#repositorio-de-marina","text":"","title":"Repositorio de Marina"},{"location":"#practicas-iaw-de-la-unidad-2","text":"","title":"Practicas IAW de la unidad 2"},{"location":"Practica2/","text":"Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apche Creaci\u00f3n del certificado autofirmado Para crear el certificado autofirmado utilidadopenssl usaremos el siguiente comando: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Introducimos unos datos que se a\u00f1adir\u00e1n al certificado. En mi caso he a\u00f1adido los siguientes: Automatizar la creaci\u00f3n de un certificado autofirmado Crearemos un script bash donde especificaremos los argumentos que le pasaremos al comando anterior a trav\u00e9s del par\u00e1metro -subj . #!/bin/bash set -x # Variables con los datos del certificado OPENSSL_COUNTRY=\"ES\" OPENSSL_PROVINCE=\"Valencia\" OPENSSL_LOCALITY=\"Gandia\" OPENSSL_ORGANIZATION=\"IES Jaume II el Just\" OPENSSL_ORGUNIT=\"Departamento de Informatica\" OPENSSL_COMMON_NAME=\"practica-certificado.local\" OPENSSL_EMAIL=\"marina@ieseljust.com\" # Creaci\u00f3n del certificado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\" Script Puedes descargar el script haciendo clic en el siguiente bot\u00f3n: Descargar Script { .md-button .md-button--primary } Configuraci\u00f3n del host virtual con SSL/TSL en el servidor Apache Copiamos el archivo \"default-ssl.conf\", que es la configuraci\u00f3n del VirtualHost, donde habilitaremos el tr\u00e1fico http y lo editamos. sudo cd /et/apache2/sites-available sudo cp default-ssl.conf certificado-ssl.conf sudo nano certificado-ssl.conf <VirtualHost *:443> #ServerName practica-certificado.local DocumentRoot/var/www/html DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Habilitaremos el VirtualHost que acabamos de configurar sudo a2ensite certificado-ssl.conf Habilitaremos el m\u00f3dulo SSL en Apache y reiniciaremos el servicio sudo a2enmod ssl sudo systemctl restart apache2 sudo systemctl status apache2 Copiamos y editamos el VirtualHost de HTTP para que redirija todo el tr\u00e1fico a HTTPS sudo cd /et/apache2/sites-available sudo cp 000-default-ssl.conf 000-certificado-ssl.conf sudo nano 000-certificado-ssl.conf <VirtualHost *:80> #ServerName practica-certificado.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond%{HTTPS} off RewriteRule^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] </VirtualHost> Habilitaremos el m\u00f3dulo rewrite y reiniciamos en servicio sudo a2enmod rewrite sudo systemctl restart apache2 sudo systemctl status apache2 Nos aseguramos de que el puerto 443 est\u00e9 abierto en las reglas del firewall para permitir el trafico hhtps. Modificamos el fichero /etc/hosts sudo nano /etc/hosts Una vez hecho todo esto, abriremos un navegador y accederemos al nombre de nuestro dominio. En mi caso ser\u00e1: https://practica-certificado.local","title":"Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apche"},{"location":"Practica2/#creacion-y-configuracion-de-un-certificado-ssltls-autofirmado-en-apche","text":"","title":"Creaci\u00f3n y configuraci\u00f3n de un certificado SSL/TLS autofirmado en Apche"},{"location":"Practica2/#creacion-del-certificado-autofirmado","text":"Para crear el certificado autofirmado utilidadopenssl usaremos el siguiente comando: sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt Introducimos unos datos que se a\u00f1adir\u00e1n al certificado. En mi caso he a\u00f1adido los siguientes:","title":"Creaci\u00f3n del certificado autofirmado"},{"location":"Practica2/#automatizar-la-creacion-de-un-certificado-autofirmado","text":"Crearemos un script bash donde especificaremos los argumentos que le pasaremos al comando anterior a trav\u00e9s del par\u00e1metro -subj . #!/bin/bash set -x # Variables con los datos del certificado OPENSSL_COUNTRY=\"ES\" OPENSSL_PROVINCE=\"Valencia\" OPENSSL_LOCALITY=\"Gandia\" OPENSSL_ORGANIZATION=\"IES Jaume II el Just\" OPENSSL_ORGUNIT=\"Departamento de Informatica\" OPENSSL_COMMON_NAME=\"practica-certificado.local\" OPENSSL_EMAIL=\"marina@ieseljust.com\" # Creaci\u00f3n del certificado sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/C=$OPENSSL_COUNTRY/ST=$OPENSSL_PROVINCE/L=$OPENSSL_LOCALITY/O=$OPENSSL_ORGANIZATION/OU=$OPENSSL_ORGUNIT/CN=$OPENSSL_COMMON_NAME/emailAddress=$OPENSSL_EMAIL\"","title":"Automatizar la creaci\u00f3n de un certificado autofirmado"},{"location":"Practica2/#script","text":"Puedes descargar el script haciendo clic en el siguiente bot\u00f3n: Descargar Script { .md-button .md-button--primary }","title":"Script"},{"location":"Practica2/#configuracion-del-host-virtual-con-ssltsl-en-el-servidor-apache","text":"Copiamos el archivo \"default-ssl.conf\", que es la configuraci\u00f3n del VirtualHost, donde habilitaremos el tr\u00e1fico http y lo editamos. sudo cd /et/apache2/sites-available sudo cp default-ssl.conf certificado-ssl.conf sudo nano certificado-ssl.conf <VirtualHost *:443> #ServerName practica-certificado.local DocumentRoot/var/www/html DirectoryIndex index.php index.html SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Habilitaremos el VirtualHost que acabamos de configurar sudo a2ensite certificado-ssl.conf Habilitaremos el m\u00f3dulo SSL en Apache y reiniciaremos el servicio sudo a2enmod ssl sudo systemctl restart apache2 sudo systemctl status apache2 Copiamos y editamos el VirtualHost de HTTP para que redirija todo el tr\u00e1fico a HTTPS sudo cd /et/apache2/sites-available sudo cp 000-default-ssl.conf 000-certificado-ssl.conf sudo nano 000-certificado-ssl.conf <VirtualHost *:80> #ServerName practica-certificado.local DocumentRoot/var/www/html #Redirige alpuerto 443 (HTTPS) RewriteEngineOn RewriteCond%{HTTPS} off RewriteRule^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] </VirtualHost> Habilitaremos el m\u00f3dulo rewrite y reiniciamos en servicio sudo a2enmod rewrite sudo systemctl restart apache2 sudo systemctl status apache2 Nos aseguramos de que el puerto 443 est\u00e9 abierto en las reglas del firewall para permitir el trafico hhtps. Modificamos el fichero /etc/hosts sudo nano /etc/hosts Una vez hecho todo esto, abriremos un navegador y accederemos al nombre de nuestro dominio. En mi caso ser\u00e1: https://practica-certificado.local","title":"Configuraci\u00f3n del host virtual con SSL/TSL en el servidor Apache"},{"location":"Practica3/","text":"Instalar, configurar y securizar phpMyAdmin Prerrequisitos Antes de instalar PHP, deber\u00edas instalar: Apache (hecho en la pr\u00e1ctica anterior) MySQL sudo apt update sudo apt install mysql-server Instalaci\u00f3n de phpMyAdmin Instala phpMyAdmin junto con las extensiones PHP necesarias. sudo apt install php-mbstring php-zip php-gd php-json php-curl php-mbstring, php-zip, php-gd, php-json, php-curl sudo apt install php libapache2-mod-php Para comprobar que hemos instalado bien php crearemos un archivo con la siguiente informaci\u00f3n y lo buscaremos a trav\u00e9s del navegador. * sudo nano /var/www/info.php <?php phpinfo(); ?> http:// IP / nombre_archivo En mi caso ser\u00e1 http://10.10.10.196/info.php Configurar phpMyAdmin para que funcione con Apache. sudo apt install phpmyadmin Para configurarlo correctamente elejiremnos las siguientes opciones: apache2 --> para el servidor s\u00ed --> cuando nos pregunte si queremos usar dbconfig-common para configurar la base de datos Asignaremos una contrase\u00f1a, en mi caso le he puesto: phpmyadmin En mi caso la instalaci\u00f3n ya estaba hecha, no he podido poner capturas. Vamos a habilitar el archivo de configuraci\u00f3n de phpmyadmin cd /etc/phpmyadmin/apache.conf sudo cp apache.conf /etc/conf-available/phpmyadmin.conf sudo a2enconf phpmyadmin.conf . Habilita la extensi\u00f3n mbstring y reinicia Apache * sudo phpenmod mbstring * sudo systemctl restart apache Configuraci\u00f3n del Acceso por Contrase\u00f1a para la Cuenta Root de MySQL Cambia el m\u00e9todo de autenticaci\u00f3n del usuario root de MySQL (de auth_socket a caching_sha2_password o mysql_native_password) sudo mysql select user,host,authentication_string,plugin from mysql.user; * alter user 'root'@'localhost' identified with 'mysql_native_password' by 'root'; Verificar los m\u00e9todos de autenticaci\u00f3n empleados por cada uno de tus usuarios. Entraremos introduciendo la contrase\u00f1a que le hemos asignado en el paso anterior con el comando: sudo mysql -u root -p Configuraci\u00f3n del Acceso por Contrase\u00f1a para un Usuario Dedicado de MySQL Crear un nuevo usuario de MySQL con una contrase\u00f1a segura. create user 'marina'@'localhost' identified with 'mysql_native_password' by 'phpmyadmin'; Otorgar al nuevo usuario los privilegios apropiados para gestionar las bases de datos a trav\u00e9s de phpMyAdmin grant all privileges on . to 'marina'@'localhost' with grant option; Comprobamos que podemos acceder a la interfaz web https:// your_domain_or_IP /phpmyadmin En mi caso ser\u00e1 https:// your_domain_or_IP /phpmyadmin Asegurando tu Instancia de phpMyAdmin Habilitar el uso de sobrescrituras de archivos .htaccess en la configuraci\u00f3n de Apache para phpMyAdmin. Editamos el archivo phpmyadmin.con y le a\u00f1adimos la l\u00ednea AllowOverride All sudo nano /etc/apache2/conf-available/phpmyadmin.conf Tendria que quedar de la siguiente forma: <Directory /usr/share/phpmyadmin> Options SymLinksIfOwnerMatch DirectoryIndex index.php AllowOverride All ... # Otras directivas </Directory> Crear un archivo .htaccess en el directorio de phpMyAdmin para implementar autenticaci\u00f3n b\u00e1sica. Creamos el archivo y lo editamos cd /usr/share/phpmyadmin sudo nano .htaccess Tendria que quedar de la siguiente forma: AuthType Basic AuthName \"Acceso Restringido\" AuthUserFile /etc/phpmyadmin/.htpasswd Require valid-user Crear un archivo .htpasswd para almacenar las credenciales de usuario y contrase\u00f1a. sudo htpasswd -c /etc/phpmyadmin/.htpasswd phpmyadmin phpmyadmin_htaccess Reiniciar Apache para aplicar los cambios. sudo systemctl restart apache2 sudo systemctl status apache2 Comprovar que funciona http:// IP / nombre_archivo En mi caso ser\u00e1 http://192.168.0.144/phpmyadmin","title":"Instalar, configurar y securizar phpMyAdmin"},{"location":"Practica3/#instalar-configurar-y-securizar-phpmyadmin","text":"","title":"Instalar, configurar y securizar phpMyAdmin"},{"location":"Practica3/#prerrequisitos","text":"Antes de instalar PHP, deber\u00edas instalar: Apache (hecho en la pr\u00e1ctica anterior) MySQL sudo apt update sudo apt install mysql-server","title":"Prerrequisitos"},{"location":"Practica3/#instalacion-de-phpmyadmin","text":"Instala phpMyAdmin junto con las extensiones PHP necesarias. sudo apt install php-mbstring php-zip php-gd php-json php-curl php-mbstring, php-zip, php-gd, php-json, php-curl sudo apt install php libapache2-mod-php Para comprobar que hemos instalado bien php crearemos un archivo con la siguiente informaci\u00f3n y lo buscaremos a trav\u00e9s del navegador. * sudo nano /var/www/info.php <?php phpinfo(); ?> http:// IP / nombre_archivo En mi caso ser\u00e1 http://10.10.10.196/info.php Configurar phpMyAdmin para que funcione con Apache. sudo apt install phpmyadmin Para configurarlo correctamente elejiremnos las siguientes opciones: apache2 --> para el servidor s\u00ed --> cuando nos pregunte si queremos usar dbconfig-common para configurar la base de datos Asignaremos una contrase\u00f1a, en mi caso le he puesto: phpmyadmin En mi caso la instalaci\u00f3n ya estaba hecha, no he podido poner capturas. Vamos a habilitar el archivo de configuraci\u00f3n de phpmyadmin cd /etc/phpmyadmin/apache.conf sudo cp apache.conf /etc/conf-available/phpmyadmin.conf sudo a2enconf phpmyadmin.conf . Habilita la extensi\u00f3n mbstring y reinicia Apache * sudo phpenmod mbstring * sudo systemctl restart apache","title":"Instalaci\u00f3n de phpMyAdmin"},{"location":"Practica3/#configuracion-del-acceso-por-contrasena-para-la-cuenta-root-de-mysql","text":"Cambia el m\u00e9todo de autenticaci\u00f3n del usuario root de MySQL (de auth_socket a caching_sha2_password o mysql_native_password) sudo mysql select user,host,authentication_string,plugin from mysql.user; * alter user 'root'@'localhost' identified with 'mysql_native_password' by 'root'; Verificar los m\u00e9todos de autenticaci\u00f3n empleados por cada uno de tus usuarios. Entraremos introduciendo la contrase\u00f1a que le hemos asignado en el paso anterior con el comando: sudo mysql -u root -p","title":"Configuraci\u00f3n del Acceso por Contrase\u00f1a para la Cuenta Root de MySQL"},{"location":"Practica3/#configuracion-del-acceso-por-contrasena-para-un-usuario-dedicado-de-mysql","text":"Crear un nuevo usuario de MySQL con una contrase\u00f1a segura. create user 'marina'@'localhost' identified with 'mysql_native_password' by 'phpmyadmin'; Otorgar al nuevo usuario los privilegios apropiados para gestionar las bases de datos a trav\u00e9s de phpMyAdmin grant all privileges on . to 'marina'@'localhost' with grant option; Comprobamos que podemos acceder a la interfaz web https:// your_domain_or_IP /phpmyadmin En mi caso ser\u00e1 https:// your_domain_or_IP /phpmyadmin","title":"Configuraci\u00f3n del Acceso por Contrase\u00f1a para un Usuario Dedicado de MySQL"},{"location":"Practica3/#asegurando-tu-instancia-de-phpmyadmin","text":"Habilitar el uso de sobrescrituras de archivos .htaccess en la configuraci\u00f3n de Apache para phpMyAdmin. Editamos el archivo phpmyadmin.con y le a\u00f1adimos la l\u00ednea AllowOverride All sudo nano /etc/apache2/conf-available/phpmyadmin.conf Tendria que quedar de la siguiente forma: <Directory /usr/share/phpmyadmin> Options SymLinksIfOwnerMatch DirectoryIndex index.php AllowOverride All ... # Otras directivas </Directory> Crear un archivo .htaccess en el directorio de phpMyAdmin para implementar autenticaci\u00f3n b\u00e1sica. Creamos el archivo y lo editamos cd /usr/share/phpmyadmin sudo nano .htaccess Tendria que quedar de la siguiente forma: AuthType Basic AuthName \"Acceso Restringido\" AuthUserFile /etc/phpmyadmin/.htpasswd Require valid-user Crear un archivo .htpasswd para almacenar las credenciales de usuario y contrase\u00f1a. sudo htpasswd -c /etc/phpmyadmin/.htpasswd phpmyadmin phpmyadmin_htaccess Reiniciar Apache para aplicar los cambios. sudo systemctl restart apache2 sudo systemctl status apache2","title":"Asegurando tu Instancia de phpMyAdmin"},{"location":"Practica3/#comprovar-que-funciona","text":"http:// IP / nombre_archivo En mi caso ser\u00e1 http://192.168.0.144/phpmyadmin","title":"Comprovar que funciona"},{"location":"Practica4/idex/","text":"Instalar y configurar WordPress Instalar m\u00e1quinas Instalamos 2 m\u00e1quinas virtuales Ubuntu Server 22.04 en las egunda maquina hay que instalar el php, mysql-client, apache Instalar dependencias sudo apt update sudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Instalar WordPress Vamos a crear el directorio de instalaci\u00f3n, ha descargar el archivo de WordPress.org y ha instalar wordpress. cd /srv sudo mkdir www sudo chown www-data: /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www Configurar Apache para WordPress Crearemos el siguiente sitio apache para wordpress: cd /etc/apache2/sites-available sudo nano wordpress.conf <VirtualHost *:80> DocumentRoot /srv/www/wordpress <Directory /srv/www/wordpress> Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted </Directory> <Directory /srv/www/wordpress/wp-content> Options FollowSymLinks Require all granted </Directory> </VirtualHost> Habilitamos el sitio: sudo a2ensite wordpress Habilita la reescritura de URL con: sudo a2enmod rewrite Deshabilitamos el sitio predeterminado: sudo a2dissite 000-default.conf Recargamos y reiniciamos el apache2 para aplicar los cambios: sudo service apache2 reload sudo systemctl restart apache2 sudo systemctl status apache2 Configurar la base de datos MySQL Para configurar WordPress, necesitamos crear una base de datos MySQL. La base de datos MySQL se ejecutar\u00e1 en un servidor distinto que Apache y PHP. Instalamos una m\u00e1quina ubuntu server, le instalamos mysql y creamos o modificamos el usuario root. Antes de seguir comprobamos que tenemos el mysql-server instalado sudo apt update sudo apt install mysql-server Configurar MySQL para conexiones remotas Para permitir conexiones remotas a MySQL, modificaremos la configuraci\u00f3n de mysqld. cd /etc/mysql/mysql.conf.d/mysqld.cnf sudo nano mysqld.conf Buscamos la linea de bind-address. Por defecto MySQL solo permite conexionews desde localhost (127.0.0.1). Modificamos el valor por la direcci\u00f3n IP de la m\u00e1quina donde se est\u00e1 ejecutando el servicio de MySQL. A\u00f1adimos lo siguiente: [mysqld] bind-address = 0.0.0.0 La ip 0.0.0.0 permite conexiones desde cualquier interfaz de red que tenga la m\u00e1quina. Antes de seguir nos aseguramos de que tenemos el mysql-client instalado o no podremos hacer los siguientes pasos Iniciamos sesi\u00f3n en MySQL: sudo mysql -u root Crearemos la base de datos para wordpress: CREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY '<tu-contrase\u00f1a>'; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Habilitamos MySQL: sudo service mysql start Configurar WordPress para conectarse a la base de datos Configuremos WordPress para usar esta base de datos. Copia el archivo de configuraci\u00f3n de muestra \" wp-config-sample.php \"a \" wp-config.php \": cd /srv/www/wordpress sudo -u www-data cp wp-config-sample.php wp-config.php Establecemos las credenciales de la base de datos en el archivo de configuraci\u00f3n: sudo -u www-data sed -i 's/data_base_name_here/wordpress/' /srv/www/wordpress/wp-config.php sudo -u www-data sed -i 's/username_here/wordpress/' /srv/www/wordpress/wp-config.php sudo -u www-data sed -i 's/password_here/<tu-contrase\u00f1a>/' /srv/www/wordpress/wp-config.php Remplazaremos \"tu-contrase\u00f1a\" por ls contrase\u00f1a de la base de datos. En mi caso es: Wordpress1 Iniciamos sesi\u00f3n desde la terminal al archivo de configuraci\u00f3n: sudo -u www-data nano /srv/www/wordpress/wp-config.php Buscaremos las siguientes lineas y las editaremos poniendo lo siguiente: define( 'AUTH_KEY', ')@n$*|p6+>Wo?~gum<}s@dU;_lg|1)H|u2gA]lRf[ Z@|D|-:^?yo}z~^9QK;^7!' ); define( 'SECURE_AUTH_KEY', 'u7s} L]`|!z}BIgW*VmP0[I[m2lrT!RJa-+Gv!MBTZSjL=8?41q+$9vo6_E#2a$P' ); define( 'LOGGED_IN_KEY', '/M|NLLsceq,{D*[YcagBEk-#{_m=N,Q}@S5fvXpqAP!z`s)b|&VU4E|I|]|- ho+' ); define( 'NONCE_KEY', '$T>tanzlP]O]nd0`-;@X!<=/MGE)v6*}(^bJ|LleVQFjhKCUM?v4whPV3_eJ{!{>' ); define( 'AUTH_SALT', 'S($ n4uB*;FvZrTt-|y|`dcv-@n.ekq,0E*jK~R{zP6(YpvKHoU(;7f(~$nLJXui' ); define( 'SECURE_AUTH_SALT', 'v=#DY[Y?`U3[=U+G6[ugqP(6b;34YTc.70+y9+fFYBr2.2-,D?R}okt28l0[m9:{' ); define( 'LOGGED_IN_SALT', 'TX/)e] =1&Qr$Hm&].+-9w%X|DEG)e9C1R|of)?0XuZg](v;V/+DA2h(0E?+id3M' ); define( 'NONCE_SALT', '`3bW?83^pcJP6i12/c|nf(=)l_!bQ?t-r`lt5:VA+5|Jq{ee>%?7i/XnxkB@}tl_' ); Configurar WordPress Abrimos nuestro navegador y ponemos lo siguiente para conectarnos al servidor donde tenemos la base de datos: http://10.10.10.40/ He tenido un problema y me sale un error Nos pedir\u00e1: T\u00edtulo de tu nuevo sitio Nombre de usuario Contrase\u00f1a Direcci\u00f3n de correo electr\u00f3nico Ten en cuenta que el nombre de usuario y la contrase\u00f1a que elijamos aqu\u00ed son para WordPress, y no proporcionan acceso a ninguna otra parte de tu servidor. Elegimos un nombre de usuario y contrase\u00f1a diferentes de las credenciales de MySQL y de las credenciales para iniciar sesi\u00f3n en el equipo o escritorio o shell del servidor. Ahora ya podemos iniciar sesi\u00f3n: http://10.10.10.40/wp-login.php","title":"Instalar y configurar WordPress"},{"location":"Practica4/idex/#instalar-y-configurar-wordpress","text":"","title":"Instalar y configurar WordPress"},{"location":"Practica4/idex/#instalar-maquinas","text":"Instalamos 2 m\u00e1quinas virtuales Ubuntu Server 22.04 en las egunda maquina hay que instalar el php, mysql-client, apache","title":"Instalar m\u00e1quinas"},{"location":"Practica4/idex/#instalar-dependencias","text":"sudo apt update sudo apt install apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip","title":"Instalar dependencias"},{"location":"Practica4/idex/#instalar-wordpress","text":"Vamos a crear el directorio de instalaci\u00f3n, ha descargar el archivo de WordPress.org y ha instalar wordpress. cd /srv sudo mkdir www sudo chown www-data: /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www","title":"Instalar WordPress"},{"location":"Practica4/idex/#configurar-apache-para-wordpress","text":"Crearemos el siguiente sitio apache para wordpress: cd /etc/apache2/sites-available sudo nano wordpress.conf <VirtualHost *:80> DocumentRoot /srv/www/wordpress <Directory /srv/www/wordpress> Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted </Directory> <Directory /srv/www/wordpress/wp-content> Options FollowSymLinks Require all granted </Directory> </VirtualHost> Habilitamos el sitio: sudo a2ensite wordpress Habilita la reescritura de URL con: sudo a2enmod rewrite Deshabilitamos el sitio predeterminado: sudo a2dissite 000-default.conf Recargamos y reiniciamos el apache2 para aplicar los cambios: sudo service apache2 reload sudo systemctl restart apache2 sudo systemctl status apache2","title":"Configurar Apache para WordPress"},{"location":"Practica4/idex/#configurar-la-base-de-datos-mysql","text":"Para configurar WordPress, necesitamos crear una base de datos MySQL. La base de datos MySQL se ejecutar\u00e1 en un servidor distinto que Apache y PHP. Instalamos una m\u00e1quina ubuntu server, le instalamos mysql y creamos o modificamos el usuario root. Antes de seguir comprobamos que tenemos el mysql-server instalado sudo apt update sudo apt install mysql-server","title":"Configurar la base de datos MySQL"},{"location":"Practica4/idex/#configurar-mysql-para-conexiones-remotas","text":"Para permitir conexiones remotas a MySQL, modificaremos la configuraci\u00f3n de mysqld. cd /etc/mysql/mysql.conf.d/mysqld.cnf sudo nano mysqld.conf Buscamos la linea de bind-address. Por defecto MySQL solo permite conexionews desde localhost (127.0.0.1). Modificamos el valor por la direcci\u00f3n IP de la m\u00e1quina donde se est\u00e1 ejecutando el servicio de MySQL. A\u00f1adimos lo siguiente: [mysqld] bind-address = 0.0.0.0 La ip 0.0.0.0 permite conexiones desde cualquier interfaz de red que tenga la m\u00e1quina. Antes de seguir nos aseguramos de que tenemos el mysql-client instalado o no podremos hacer los siguientes pasos Iniciamos sesi\u00f3n en MySQL: sudo mysql -u root Crearemos la base de datos para wordpress: CREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY '<tu-contrase\u00f1a>'; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit Habilitamos MySQL: sudo service mysql start","title":"Configurar MySQL para conexiones remotas"},{"location":"Practica4/idex/#configurar-wordpress-para-conectarse-a-la-base-de-datos","text":"Configuremos WordPress para usar esta base de datos. Copia el archivo de configuraci\u00f3n de muestra \" wp-config-sample.php \"a \" wp-config.php \": cd /srv/www/wordpress sudo -u www-data cp wp-config-sample.php wp-config.php Establecemos las credenciales de la base de datos en el archivo de configuraci\u00f3n: sudo -u www-data sed -i 's/data_base_name_here/wordpress/' /srv/www/wordpress/wp-config.php sudo -u www-data sed -i 's/username_here/wordpress/' /srv/www/wordpress/wp-config.php sudo -u www-data sed -i 's/password_here/<tu-contrase\u00f1a>/' /srv/www/wordpress/wp-config.php Remplazaremos \"tu-contrase\u00f1a\" por ls contrase\u00f1a de la base de datos. En mi caso es: Wordpress1 Iniciamos sesi\u00f3n desde la terminal al archivo de configuraci\u00f3n: sudo -u www-data nano /srv/www/wordpress/wp-config.php Buscaremos las siguientes lineas y las editaremos poniendo lo siguiente: define( 'AUTH_KEY', ')@n$*|p6+>Wo?~gum<}s@dU;_lg|1)H|u2gA]lRf[ Z@|D|-:^?yo}z~^9QK;^7!' ); define( 'SECURE_AUTH_KEY', 'u7s} L]`|!z}BIgW*VmP0[I[m2lrT!RJa-+Gv!MBTZSjL=8?41q+$9vo6_E#2a$P' ); define( 'LOGGED_IN_KEY', '/M|NLLsceq,{D*[YcagBEk-#{_m=N,Q}@S5fvXpqAP!z`s)b|&VU4E|I|]|- ho+' ); define( 'NONCE_KEY', '$T>tanzlP]O]nd0`-;@X!<=/MGE)v6*}(^bJ|LleVQFjhKCUM?v4whPV3_eJ{!{>' ); define( 'AUTH_SALT', 'S($ n4uB*;FvZrTt-|y|`dcv-@n.ekq,0E*jK~R{zP6(YpvKHoU(;7f(~$nLJXui' ); define( 'SECURE_AUTH_SALT', 'v=#DY[Y?`U3[=U+G6[ugqP(6b;34YTc.70+y9+fFYBr2.2-,D?R}okt28l0[m9:{' ); define( 'LOGGED_IN_SALT', 'TX/)e] =1&Qr$Hm&].+-9w%X|DEG)e9C1R|of)?0XuZg](v;V/+DA2h(0E?+id3M' ); define( 'NONCE_SALT', '`3bW?83^pcJP6i12/c|nf(=)l_!bQ?t-r`lt5:VA+5|Jq{ee>%?7i/XnxkB@}tl_' );","title":"Configurar WordPress para conectarse a la base de datos"},{"location":"Practica4/idex/#configurar-wordpress","text":"Abrimos nuestro navegador y ponemos lo siguiente para conectarnos al servidor donde tenemos la base de datos: http://10.10.10.40/ He tenido un problema y me sale un error Nos pedir\u00e1: T\u00edtulo de tu nuevo sitio Nombre de usuario Contrase\u00f1a Direcci\u00f3n de correo electr\u00f3nico Ten en cuenta que el nombre de usuario y la contrase\u00f1a que elijamos aqu\u00ed son para WordPress, y no proporcionan acceso a ninguna otra parte de tu servidor. Elegimos un nombre de usuario y contrase\u00f1a diferentes de las credenciales de MySQL y de las credenciales para iniciar sesi\u00f3n en el equipo o escritorio o shell del servidor. Ahora ya podemos iniciar sesi\u00f3n: http://10.10.10.40/wp-login.php","title":"Configurar WordPress"},{"location":"Practica5/","text":"Instalar y configurar WordPress Requisitos Antes de empezar la practica necesitamos saber lo siguiente: Instalaci\u00f3n de m\u00e1quinas Instalamos 3 m\u00e1quinas virtuales Ubuntu Server 22.04 Usaremos el usuario root o un usuario con privilegios sudo Dominios a usar Usaremos los siguientes dominio con las siguiente estructura: balancer.iaw2425.com web1i.aw2425.com web2.iaw2425.com Instalamos el servidor web Apache Verificamos el estado del servidor Apache: systemctl status apache2 En caso de que no est\u00e9 instalado lo instalamos: sudo apt update sudo apt install apache2 Todo esto teniendo en cuenta que hay que hacerlo en todos los servidores (los 3 que tenemos que configurar) Configuraci\u00f3n del Primer servidor Bakend Apache --> WEB1 Creamos una p\u00e1quina HTML de muestra en el servidor apache \"web1\" donde pondremos el siguiente c\u00f3digo: cd /var/www/html/ sudo nano web1.html <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <title>Servidor Web Apache 1</title> <h2>\u00a1Esta es la p\u00e1gina del Servidor Web Apache 1!</h2> </html> A continuaci\u00f3n, dentro del servidor apache \"web1\", copiamos el archivo de configuraci\u00f3n de host virtual y cambiamos las siguientes configuraciones: cd /etc/apache2/sites-enabled/ sudo cp 000-default.conf web1.conf sudo nano web1.conf <VirtualHost *:80> ServerName web1.iaw2425.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html DirectoryIndex web1.html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Reiniciamos el servicio de apache: sudo systemctl restart apache2 sudo systemctl status apache2 Configuraci\u00f3n del Segundo servidor Bakend Apache --> WEB2 Creamos una p\u00e1quina HTML de muestra en el servidor apache \"web2\" donde pondremos el siguiente c\u00f3digo: cd /var/www/html/ sudo nano web2.html <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <title>Servidor Web Apache 2</title> <h2>\u00a1Esta es la p\u00e1gina del Servidor Web Apache 2!</h2> </html> A continuaci\u00f3n, dentro del servidor apache \"web2\", creamos el archivo de configuraci\u00f3n de host virtual con las siguientes configuraciones: cd /etc/apache2/sites-enabled/ sudo cp 000-default.conf web1.conf sudo nano web2.conf <VirtualHost *:80> ServerName web2.iaw2425.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html DirectoryIndex web2.html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2 Creaci\u00f3n de un Balanceador de Carga Apache Configuramos el tercer servidor como un servidor de balanceo de carga para redirigir el tr\u00e1fico a los dos servidoires web backend que hemos creado en los pasos anteriores. Habilitamos los modulos proxy en el servidor de balanceo de carga: sudo a2enmod proxy sudo a2enmod proxy_http sudo a2enmod proxy_balancer sudo a2enmod lbmethod_byrequests Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2 Verificamos todos los m\u00f3dulos proxy: apachectl -M | grep proxy Creamos un archivo de configuraci\u00f3n de Apache para el balanceo de carga y le a\u00f1adimos lo siguiente: cd /etc/apache2/sites-enabled/ sudo nano loadbalancer.conf <VirtualHost *:80> ServerName balancer.iaw2425.com <Proxy balancer://webserver> # servidor 1 BalancerMember http://web1.iaw2425.com #BalancerMember http://IP_HTTP_SERVER_1:80 #servidor 2 BalancerMember http://web2.iaw2425.com #BalancerMember http://IP_HTTP_SERVER_1:80 ProxySet stickysession=ROUTEID </Proxy> ProxyPreserveHost On ProxyPass / balancer://webserver/ ProxyPassReverse / balancer://webserver/ </VirtualHost> Configuraci\u00f3n de la Pol\u00edtica de Balanceo de Carga Para configurar la pol\u00edtica de balanceo de carga necesitamos tener el m\u00f3dulo proxy_balancer activado: sudo a2enmod proxy_balancer El tipo de balanceo de carga que vamos a usar en esta pr\u00e1ctica ser\u00e1 un balanceo de tipo Round Robin . Round Robin Este m\u00e9todo consiste en distribuir las peticiones entre los servidores de forma que cada vez que llegue una nueva petici\u00f3n se env\u00eda al siguiente servidor de la lista de servidores configurados en el servidor Apache.Este m\u00e9todo es simple y f\u00e1cil de configurar, pero no es efectivo para la alta disponibilidad y la escalabilidad. Para activar este m\u00e9todo de balanceo tenemos que activar el siguiente m\u00f3dulo: sudo a2enmod lbmethod_byrequests Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2 Verificar el Balanceo de Carga con Apache Abrimos nuestro navegador y accedemos al balanceador de carga: http://balancer.iaw2425.com Espera un tiempo y actualiza la p\u00e1gina. Esta vez, deber\u00edas ver la p\u00e1gina HTML de muestra de tu segundo servidor backend.","title":"Instalar y configurar WordPress"},{"location":"Practica5/#instalar-y-configurar-wordpress","text":"","title":"Instalar y configurar WordPress"},{"location":"Practica5/#requisitos","text":"Antes de empezar la practica necesitamos saber lo siguiente:","title":"Requisitos"},{"location":"Practica5/#instalacion-de-maquinas","text":"Instalamos 3 m\u00e1quinas virtuales Ubuntu Server 22.04 Usaremos el usuario root o un usuario con privilegios sudo","title":"Instalaci\u00f3n de m\u00e1quinas"},{"location":"Practica5/#dominios-a-usar","text":"Usaremos los siguientes dominio con las siguiente estructura: balancer.iaw2425.com web1i.aw2425.com web2.iaw2425.com","title":"Dominios a usar"},{"location":"Practica5/#instalamos-el-servidor-web-apache","text":"Verificamos el estado del servidor Apache: systemctl status apache2 En caso de que no est\u00e9 instalado lo instalamos: sudo apt update sudo apt install apache2 Todo esto teniendo en cuenta que hay que hacerlo en todos los servidores (los 3 que tenemos que configurar)","title":"Instalamos el servidor web Apache"},{"location":"Practica5/#configuracion-del-primer-servidor-bakend-apache-web1","text":"Creamos una p\u00e1quina HTML de muestra en el servidor apache \"web1\" donde pondremos el siguiente c\u00f3digo: cd /var/www/html/ sudo nano web1.html <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <title>Servidor Web Apache 1</title> <h2>\u00a1Esta es la p\u00e1gina del Servidor Web Apache 1!</h2> </html> A continuaci\u00f3n, dentro del servidor apache \"web1\", copiamos el archivo de configuraci\u00f3n de host virtual y cambiamos las siguientes configuraciones: cd /etc/apache2/sites-enabled/ sudo cp 000-default.conf web1.conf sudo nano web1.conf <VirtualHost *:80> ServerName web1.iaw2425.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html DirectoryIndex web1.html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Reiniciamos el servicio de apache: sudo systemctl restart apache2 sudo systemctl status apache2","title":"Configuraci\u00f3n del Primer servidor Bakend Apache --&gt; WEB1"},{"location":"Practica5/#configuracion-del-segundo-servidor-bakend-apache-web2","text":"Creamos una p\u00e1quina HTML de muestra en el servidor apache \"web2\" donde pondremos el siguiente c\u00f3digo: cd /var/www/html/ sudo nano web2.html <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <title>Servidor Web Apache 2</title> <h2>\u00a1Esta es la p\u00e1gina del Servidor Web Apache 2!</h2> </html> A continuaci\u00f3n, dentro del servidor apache \"web2\", creamos el archivo de configuraci\u00f3n de host virtual con las siguientes configuraciones: cd /etc/apache2/sites-enabled/ sudo cp 000-default.conf web1.conf sudo nano web2.conf <VirtualHost *:80> ServerName web2.iaw2425.com ServerAdmin webmaster@localhost DocumentRoot /var/www/html DirectoryIndex web2.html ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2","title":"Configuraci\u00f3n del Segundo servidor Bakend Apache --&gt; WEB2"},{"location":"Practica5/#creacion-de-un-balanceador-de-carga-apache","text":"Configuramos el tercer servidor como un servidor de balanceo de carga para redirigir el tr\u00e1fico a los dos servidoires web backend que hemos creado en los pasos anteriores. Habilitamos los modulos proxy en el servidor de balanceo de carga: sudo a2enmod proxy sudo a2enmod proxy_http sudo a2enmod proxy_balancer sudo a2enmod lbmethod_byrequests Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2 Verificamos todos los m\u00f3dulos proxy: apachectl -M | grep proxy Creamos un archivo de configuraci\u00f3n de Apache para el balanceo de carga y le a\u00f1adimos lo siguiente: cd /etc/apache2/sites-enabled/ sudo nano loadbalancer.conf <VirtualHost *:80> ServerName balancer.iaw2425.com <Proxy balancer://webserver> # servidor 1 BalancerMember http://web1.iaw2425.com #BalancerMember http://IP_HTTP_SERVER_1:80 #servidor 2 BalancerMember http://web2.iaw2425.com #BalancerMember http://IP_HTTP_SERVER_1:80 ProxySet stickysession=ROUTEID </Proxy> ProxyPreserveHost On ProxyPass / balancer://webserver/ ProxyPassReverse / balancer://webserver/ </VirtualHost>","title":"Creaci\u00f3n de un Balanceador de Carga Apache"},{"location":"Practica5/#configuracion-de-la-politica-de-balanceo-de-carga","text":"Para configurar la pol\u00edtica de balanceo de carga necesitamos tener el m\u00f3dulo proxy_balancer activado: sudo a2enmod proxy_balancer El tipo de balanceo de carga que vamos a usar en esta pr\u00e1ctica ser\u00e1 un balanceo de tipo Round Robin . Round Robin Este m\u00e9todo consiste en distribuir las peticiones entre los servidores de forma que cada vez que llegue una nueva petici\u00f3n se env\u00eda al siguiente servidor de la lista de servidores configurados en el servidor Apache.Este m\u00e9todo es simple y f\u00e1cil de configurar, pero no es efectivo para la alta disponibilidad y la escalabilidad. Para activar este m\u00e9todo de balanceo tenemos que activar el siguiente m\u00f3dulo: sudo a2enmod lbmethod_byrequests Reiniciamos el servicio de apache: systemctl restart apache2 systemctl status apache2","title":"Configuraci\u00f3n de la Pol\u00edtica de Balanceo de Carga"},{"location":"Practica5/#verificar-el-balanceo-de-carga-con-apache","text":"Abrimos nuestro navegador y accedemos al balanceador de carga: http://balancer.iaw2425.com Espera un tiempo y actualiza la p\u00e1gina. Esta vez, deber\u00edas ver la p\u00e1gina HTML de muestra de tu segundo servidor backend.","title":"Verificar el Balanceo de Carga con Apache"}]}